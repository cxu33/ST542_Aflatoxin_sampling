---
title: "542 simulation brainstorming"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(ggplot2)
library(lme4)
```

# Simple case to start out

Start assuming the follow factors are NOT in play

-   time

-   climate

-   season

-   harvesting procedures

-   national trends

# Simulate data coming from 1 supplier

A data generating model with random effects for Train and Rail Car

$$
Y_{ij} = \mu  +A_i + E_{ij}
$$

Where $Y_{ij}$ denotes the aflatoxin level in (log10-ppb units) for the ith train and the jth railcar.

$$
i=1,2,... \text{  = index of the train}
$$

$$
j=1,2,...r_i \text{ = index of railcar in the } i\text{th train}
$$

$$
A_i \text{ ~ iid } N(0, \sigma^2_A) \text{ = random effect due to ith train}
$$

$$ E_{ij} \text{ ~ iid } N(0, \sigma^2_E) \text{ = random effect due to jth rail car} $$

Also assume all $A_i$ and $E_{ij}$ are independent.

```{r}
# Population parameters
mean_aflatoxin <- log10(30) # Say the mean aflatoxin level is high, e.g., 30 ppb (transformed to log10 units)
train_effect_sd <- log10(10) # in units of log10-ppb aflatoxin
railcar_effect_sd <- log10(2) # in units of log10-ppb aflatoxin

# Number of trains/railcars to simulate
nrailcars_per_train <- 200
ntrains <- 3

set.seed(393)

# Generate table of Random train effects
train_effect <- data.frame(train_id = 1:ntrains,
                           train_effect = rnorm(n = ntrains, 
                                                mean = 0, 
                                                sd = train_effect_sd))

train_effect

# Generate table of random rail car effects
railcar_effect <- data.frame(train_id = rep(1:ntrains, each = nrailcars_per_train),
                             railcar_id = rep(1:nrailcars_per_train, times = ntrains),
                             railcar_effect = rnorm(n = ntrains*nrailcars_per_train,
                                                    mean = 0, 
                                                    sd = railcar_effect_sd))

# Merge tables
dat <- merge(train_effect, railcar_effect, by = "train_id", all = TRUE)

# Calculate the aflatoxin level in the jth rail car from the ith train
dat <- dat %>% 
  mutate(y = mean_aflatoxin + train_effect + railcar_effect)

# Make some variables factors
dat <- dat %>% 
  mutate(train_id = as.factor(train_id))


head(dat)

```

# Visualization

```{r}
# All together
ggplot(dat, aes(x = y))+
  geom_histogram(aes(fill = train_id))+
  xlab("aflatoxin level in jth railcar (log10-ppb units)")

# Separate by train ID
ggplot(dat, aes(x = y))+
  geom_histogram(aes(fill = train_id))+
  facet_wrap(vars(train_id), ncol = 1)+
  xlab("aflatoxin level in jth railcar (log10-ppb units)")
```

# **Model fitting**

```{r}
model1 <- lmer(y ~ 1 + (1 | train_id), data = dat)
summary(model1)
```

# **Extend the Simulation to Multiple Suppliers**

```{r}
# Population parameters
supplier_effect_sd <- 1.5           # SD for supplier effect 

# Simulation parameters
n_suppliers <- 10                   # number of suppliers

# Define threshold in log10 units for 20 ppb
threshold_log10 <- log10(20)

# Function to simulate one supplier's data including supplier effect
simulate_supplier <- function(supplier_id) {
  # Supplier random effect
  supplier_effect <- rnorm(1, mean = 0, sd = supplier_effect_sd)
  
  # Simulate train effects for this supplier
  train_effect <- data.frame(
    train_id = 1:ntrains,
    supplier_id = supplier_id,
    train_effect = rnorm(n = ntrains, mean = 0, sd = train_effect_sd)
  )
  
  # Simulate railcar effects for each train
  railcar_effect <- data.frame(
    train_id = rep(1:ntrains, each = nrailcars_per_train),
    supplier_id = supplier_id,
    railcar_id = rep(1:nrailcars_per_train, times = ntrains),
    railcar_effect = rnorm(n = ntrains * nrailcars_per_train, mean = 0, sd = railcar_effect_sd)
  )
  
  # Merge tables and calculate y values (log10-ppb)
  dat_supplier <- merge(train_effect, railcar_effect, by = c("supplier_id", "train_id"))
  dat_supplier <- dat_supplier %>% 
    mutate(y = mean_aflatoxin + supplier_effect + train_effect + railcar_effect,
           ppb = 10^y)  # Convert back to ppb
  
  return(dat_supplier)
}

# Create a data frame to store supplier vetting results
supplier_results <- data.frame(supplier_id = 1:n_suppliers, rejected = NA)

# Loop over each supplier, simulate their data, and apply the decision rule
for (i in 1:n_suppliers) {
  dat_supplier <- simulate_supplier(i)
  
  # Decision rule: reject if any sample exceeds 20 ppb.
  rejected <- any(dat_supplier$ppb > 20)
  
  supplier_results$rejected[i] <- rejected
}

# View the results: which suppliers are rejected?
print(supplier_results)
```

# Research question 1

```{r}
# We simulate the aflatoxin levels in the whole population using a gamma distribution to generate highly skewed data. 
set.seed(123)
n <- 1000
shape <- 0.5      # shape < 1 gives high skew
scale <- 10       # adjust scale so that some values exceed 30
gamma_samples <- rgamma(n, shape = shape, scale = scale)

hist(gamma_samples, breaks = 50, main = "Highly Right-Skewed Distribution (Gamma)", 
     xlab = "Values", col = "skyblue", border = "white")
summary(gamma_samples)


```

If we get a trainload from a new supplier, how many railcars need to be sampled in order to be reasonably confident that the whole trainload is safe?

Preliminary approach:

```{r}
# Parameters
nrailcars_per_train <- 200
shape_param <- 0.5   # for the gamma distribution (controls skewness)
scale_param <- 10    # for the gamma distribution (controls mean)

# Define thresholds
regulatory_threshold <- 20  # ppb threshold for safety
sample_threshold <- 10      # threshold used in sampling

# Define the desired safety proportion for the full trainload (95%)
target_safe_proportion <- 0.95

# Function to simulate one trainload
simulate_trainload <- function() {
  # Simulate gamma component for each railcar
  gamma_component <- rgamma(nrailcars_per_train, shape = shape_param, scale = scale_param)
  # Simulate railcar-specific effects from a standard normal distribution
  railcar_effect <- rnorm(nrailcars_per_train, mean = 0, sd = 1)
  # Combine additively (if negative values occur, set them to 0)
  observed <- gamma_component + railcar_effect
  observed[observed < 0] <- 0
  return(observed)
}

# Function to compute the lower bound of a 95% CI for the proportion (99% ci reduces FNR but requires larger sample size)
ci_lower_bound <- function(x, N, conf = 0.95) {
  n <- length(x)
  p_hat <- mean(x < sample_threshold)
  if(n == N) return(p_hat)  # No uncertainty if we sample everything
  
  fpc <- (N - n) / (N - 1)
  se <- sqrt(p_hat * (1 - p_hat) / n * fpc)
  z <- qnorm((1 + conf) / 2)
  lower <- p_hat - z * se
  return(max(0, lower))  # Ensure lower bound doesn't go below 0
}

# Simulation settings
n_sim <- 1000  # Number of simulations per sample size
candidate_sample_sizes <- seq(5, nrailcars_per_train, by = 5)
false_negative_rate <- numeric(length(candidate_sample_sizes))
total_unsafe <- numeric(length(candidate_sample_sizes))

# Progress bar setup
pb <- txtProgressBar(min = 0, max = length(candidate_sample_sizes), style = 3)

# Loop over candidate sample sizes
for (i in seq_along(candidate_sample_sizes)) {
  n_sample <- candidate_sample_sizes[i]
  false_negatives <- 0
  total_unsafe_trainloads <- 0
  
  for (j in 1:n_sim) {
    ppb <- simulate_trainload()
    
    # True safe proportion in the full trainload
    true_train_safe <- mean(ppb < regulatory_threshold)
    full_safe <- (true_train_safe >= target_safe_proportion)
    
    if (!full_safe) {
      total_unsafe_trainloads <- total_unsafe_trainloads + 1
      
      # Draw a random sample of n_sample railcars
      sample_ppb <- sample(ppb, n_sample)
      sample_lower_bound <- ci_lower_bound(sample_ppb, N = nrailcars_per_train)
      sample_safe <- (sample_lower_bound >= target_safe_proportion)
      
      # Count false negatives
      if (sample_safe) {
        false_negatives <- false_negatives + 1
      }
    }
  }
  
  false_negative_rate[i] <- ifelse(total_unsafe_trainloads > 0,
                                  false_negatives / total_unsafe_trainloads,
                                  NA)
  total_unsafe[i] <- total_unsafe_trainloads
  
  setTxtProgressBar(pb, i)  # Update progress bar
}
close(pb)

# Create results dataframe
results <- data.frame(
  n_sample = candidate_sample_sizes,
  false_negative_rate = false_negative_rate,
  total_unsafe = total_unsafe
)

# Plot the results
ggplot(results, aes(x = n_sample, y = false_negative_rate)) +
  geom_line(color = "steelblue", linewidth = 1.2) +
  geom_point(color = "steelblue", size = 2) +
  labs(
    title = "False Negative Rate vs. Sample Size",
    subtitle = paste("Based on", n_sim, "simulations per sample size"),
    x = "Sample Size (number of railcars tested)",
    y = "False Negative Rate (proportion)"
  ) +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  scale_x_continuous(breaks = seq(0, nrailcars_per_train, by = 20)) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5),
    panel.grid.major = element_line(color = "gray90"),
    panel.grid.minor = element_blank()
  )

# Print summary of results
print(results)

```

Method 1: Model the number of safe cars in subsample as coming from a Hypergeometric distribution. Create 95% confidence intervals for plausible values for the number of safe rail cars in trainload.

The **hypergeometric distribution** describes the probability of k successes (random draws for which the object drawn has a specified feature) in n draws, *without* replacement, from a finite [population](https://en.wikipedia.org/wiki/Statistical_population "Statistical population") of size N that contains exactly K objects, wherein each draw is either a success or a failure.

```{r}
N <- 200      # total railcars in the train
n <- 30       # number of rail cars sampled
alpha <- 0.05 # significance level

# Function to compute the hypergeometric probability of observing n safe railcars given S railcars are safe in the train. (S safe railcars out of N railcars in total)
prob_all_safe <- function(S, n, N) {
  dhyper(x = n, m = S, n = N - S, k = n)
}

# Find the smallest S (>= n) for which the probability is at least alpha/2 (for the lower tail)
possible_S <- n:N
probs <- sapply(possible_S, prob_all_safe, n = n, N = N)

# The lower bound S_low is the smallest S for which the probability exceeds our cutoff.
S_low <- possible_S[min(which(probs >= alpha/2))]

cat("For a sample of", n, "railcars (all safe), the 95% CI for the total number of safe railcars is approximately [",
    S_low, ",", N, "].\n")
```

Method 2: Leverage the Normality of the aflatoxin levels to get a tighter estimate of the number of safe rail cars in the train?

The aflatoxin levels in log‐scale are approximately Normal.

$$
Y \sim (\mu, \sigma^2)
$$

Define T as the threshold: $T = log_{10}(20)$;

The probability a railcar is safe is: $p=P(Y<T)=\Phi(\frac{T-\mu}{\sigma})$;

The number of safe railcars X in a train with N railcars can be modeled with a Binomial distribution:

$$
X \sim B(N,p)
$$

Hence, the 95% CI is $np\pm1.96\sqrt{np(1-p)}$

```{r}
# Parameters (example values)
mu <- log10(30)      # Overall mean of aflatoxin level
sigma_train <- log10(10)    # SD for train effect 
sigma_railcar <- log10(2)   # SD for railcar effect 

# Combined standard deviation (if effects add in quadrature)
sigma <- sqrt(sigma_train^2 + sigma_railcar^2)

# Safety threshold in log10 units
T <- log10(20)

# Probability a single railcar is safe
p <- pnorm(T, mean = mu, sd = sigma)

# Number of railcars in the train
N <- 200

# Expected number of safe railcars
expected_safe <- N * p

# Using normal approximation to the binomial for 95% CI
se <- sqrt(N * p * (1 - p))
CI_lower <- expected_safe - 1.96 * se
CI_upper <- expected_safe + 1.96 * se
cat("95% CI for the number of safe railcars: [", round(CI_lower), ",", round(CI_upper), "]\n")
```
